# -*- coding: utf-8 -*-
"""soccer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LPAHJJfWoDeGfmFgeFgqd_dD6sh4d6RW
"""

import numpy as np
import pandas as pd
import re
import seaborn as sns
import matplotlib.pyplot as plt

# Load player dataset from GitHub
url = ('https://raw.githubusercontent.com/tommywood81/EPL_Predict/main/data/raw/epl_data.csv')
df = pd.read_csv(url)

pd.set_option("display.max_columns", None)
pd.set_option("display.max_rows", None)

# print('original_df')
# print(df.head())

#limit to 2023/24 and the first half of the 2024/25 season
df_24_25 = (df[(df['Season'] == '2023/24') | (df['Season'] == '2024/25')])

# Rename the columns
df_24_25 = df_24_25.rename(columns={
    'Date': 'date',
    'FTH Goals': 'fth_goals',
    'FTA Goals': 'fta_goals',
    'FT Result': 'ft_result',
    'Season': 'season',
    'HomeTeam': 'home_team',
    'AwayTeam': 'away_team',
    'H SOT': 'h_sot',
    'A SOT': 'a_sot',
    'H Corners': 'h_corners',
    'A Corners': 'a_corners'
})

# Define the columns to keep
columns_to_keep = ['fth_goals', 'fta_goals', 'ft_result', 'home_team', 'away_team', 'h_sot', 'a_sot', 'h_corners', 'a_corners']

# Select the columns to keep
df_24_25 = df_24_25[columns_to_keep]

# count = df_24_25.count()
# print(count)


# Replace spaces with underscores, remove special characters, and convert to lowercase
df_24_25['home_team'] = df_24_25['home_team'].str.replace(' ', '').str.replace(r'[^a-zA-Z0-9_]', '', regex=True).str.lower()
df_24_25['away_team'] = df_24_25['away_team'].str.replace(' ', '').str.replace(r'[^a-zA-Z0-9_]', '', regex=True).str.lower()

# print(df_24_25.head(10))

# Handle Missing Values
df_24_25.isnull().sum()*100/len(df)

# Select only numerical features
numerical_df = df_24_25.select_dtypes(include=['number'])

# Calculate the correlation matrix using Spearman method
corrmat = numerical_df.corr(method='spearman')

# Plot the heatmap
plt.figure(figsize=(5,5))
g = sns.heatmap(corrmat, annot=True)
plt.show()

numerical_feature = [feature for feature in df_24_25.columns if df_24_25[feature].dtypes != 'O']
discrete_feature=[feature for feature in numerical_feature if len(df_24_25[feature].unique())<25]
continuous_feature = [feature for feature in numerical_feature if feature not in discrete_feature]
categorical_feature = [feature for feature in df_24_25.columns if feature not in numerical_feature]
print("Numerical Features Count {}".format(len(numerical_feature)))
print("Discrete feature Count {}".format(len(discrete_feature)))
print("Continuous feature Count {}".format(len(continuous_feature)))
import numpy as np
import pandas as pd
import re
import seaborn as sns
import matplotlib.pyplot as plt

# Load player dataset from GitHub
url = ('https://raw.githubusercontent.com/tommywood81/EPL_Predict/main/data/raw/epl_data.csv')
df = pd.read_csv(url)

pd.set_option("display.max_columns", None)
pd.set_option("display.max_rows", None)

# print('original_df')
# print(df.head())

#limit to 2023/24 and the first half of the 2024/25 season
df_24_25 = (df[(df['Season'] == '2023/24') | (df['Season'] == '2024/25')])

# Rename the columns
df_24_25 = df_24_25.rename(columns={
    'Date': 'date',
    'FTH Goals': 'fth_goals',
    'FTA Goals': 'fta_goals',
    'FT Result': 'ft_result',
    'Season': 'season',
    'HomeTeam': 'home_team',
    'AwayTeam': 'away_team',
    'H SOT': 'h_sot',
    'A SOT': 'a_sot',
    'H Corners': 'h_corners',
    'A Corners': 'a_corners'
})

# Define the columns to keep
columns_to_keep = ['fth_goals', 'fta_goals', 'ft_result', 'home_team', 'away_team', 'h_sot', 'a_sot', 'h_corners', 'a_corners']

# Select the columns to keep
df_24_25 = df_24_25[columns_to_keep]

# count = df_24_25.count()
# print(count)


# Replace spaces with underscores, remove special characters, and convert to lowercase
df_24_25['home_team'] = df_24_25['home_team'].str.replace(' ', '').str.replace(r'[^a-zA-Z0-9_]', '', regex=True).str.lower()
df_24_25['away_team'] = df_24_25['away_team'].str.replace(' ', '').str.replace(r'[^a-zA-Z0-9_]', '', regex=True).str.lower()

# print(df_24_25.head(10))

# Handle Missing Values
df_24_25.isnull().sum()*100/len(df)

# Select only numerical features
numerical_df = df_24_25.select_dtypes(include=['number'])

# Calculate the correlation matrix using Spearman method
corrmat = numerical_df.corr(method='spearman')

# Plot the heatmap
plt.figure(figsize=(5,5))
g = sns.heatmap(corrmat, annot=True)
plt.show()

numerical_feature = [feature for feature in df_24_25.columns if df_24_25[feature].dtypes != 'O']
discrete_feature=[feature for feature in numerical_feature if len(df_24_25[feature].unique())<25]
continuous_feature = [feature for feature in numerical_feature if feature not in discrete_feature]
categorical_feature = [feature for feature in df_24_25.columns if feature not in numerical_feature]
print("Numerical Features Count {}".format(len(numerical_feature)))
print("Discrete feature Count {}".format(len(discrete_feature)))
print("Continuous feature Count {}".format(len(continuous_feature)))
print("Categorical feature Count {}".format(len(categorical_feature)))

print((df_24_25['ft_result'] == 'D').sum())
print((df_24_25['ft_result'] == 'H').sum())
print((df_24_25['ft_result'] == 'A').sum())